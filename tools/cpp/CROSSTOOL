major_version: "1"
minor_version: "0"
default_target_cpu: "x86_64"

default_toolchain {
    cpu: "x86_64"
    toolchain_identifier: "ubuntu_x86_64_clang_toolchain"
}

toolchain {
    toolchain_identifier: "ubuntu_x86_64_clang_toolchain"
    host_system_name:     "x86_64-unknown-linux-gnu"
    target_system_name:   "x86_64-unknown-linux-gnu"
    target_cpu:           "x86_64"
    target_libc:          "GLIBC_2.19"
    compiler:             "clang"
    abi_version:          "clang-6.0"
    abi_libc_version:     "GLIBC_2.19"

    tool_path { name: "ar"      path: "wrappers/llvm-ar.sh" }
    tool_path { name: "cpp"     path: "wrappers/clang++.sh" }
    tool_path { name: "dwp"     path: "wrappers/llvm-dwp.sh" }
    tool_path { name: "gcc"     path: "wrappers/clang.sh" }
    tool_path { name: "gcov"    path: "wrappers/llvm-cov.sh" }
    tool_path { name: "ld"      path: "wrappers/lld.sh" }
    tool_path { name: "nm"      path: "wrappers/llvm-nm.sh" }
    tool_path { name: "objcopy" path: "wrappers/llvm-objcopy.sh" }
    tool_path { name: "objdump" path: "wrappers/llvm-objdump.sh" }
    tool_path { name: "strip"   path: "/usr/bin/strip" }

    supports_gold_linker: false
    supports_thin_archives: true
    supports_start_end_lib: true
    supports_interface_shared_objects: true
    supports_embedded_runtimes: true
    supports_incremental_linker: true
    supports_normalizing_ar: true
    supports_fission: true
    needsPic: true

    # tell bazel including from these directories isn't a sandbox break
    cxx_builtin_include_directory: "%package(@clang//)%/include/c++/v1"
    cxx_builtin_include_directory: "%package(@clang//)%/lib/clang/6.0.1/include"
    cxx_builtin_include_directory: "/usr/include"

    cxx_flag: "-std=c++17"
    cxx_flag: "-stdlib=libc++"
    cxx_flag: "-DLIBCXX_USE_COMPILER_RT=YES"
    cxx_flag: "-DLIBCXXABI_USE_COMPILER_RT=YES"
    cxx_flag: "-DLIBCXXABI_USE_LLVM_UNWINDER=YES"

    linker_flag: "-fuse-ld=lld"
    linker_flag: "-rtlib=compiler-rt"
    linker_flag: "-lm"
    linker_flag: "-lpthread"
    linker_flag: "-ldl"

    # From the default bazel crosstool
    objcopy_embed_flag: ["-I", "binary"]

    # Make C++ compilation deterministic. Use linkstamping instead of these compiler symbols.
    unfiltered_cxx_flag: "-Wno-builtin-macro-redefined"
    unfiltered_cxx_flag: "-D__DATE__=\"redacted\""
    unfiltered_cxx_flag: "-D__TIMESTAMP__=\"redacted\""
    unfiltered_cxx_flag: "-D__TIME__=\"redacted\""

    # Security hardening
    compiler_flag: "-U_FORTIFY_SOURCE"
    compiler_flag: "-D_FORTIFY_SOURCE=1"
    compiler_flag: "-fstack-protector"
    linker_flag: "-Wl,-z,relro,-z,now"

    # Enable coloring even if there's no attached terminal. Bazel removes the escape sequences if
    # --nocolor is specified. This isn't supported by gcc on Ubuntu 14.04.
    compiler_flag: "-fcolor-diagnostics"

    # Enable all warnings and warnings treated as errors
    compiler_flag: "-Wall"
    compiler_flag: "-Werror"

    # Anticipated future default.
    unfiltered_cxx_flag: "-no-canonical-prefixes"
    linker_flag: "-no-canonical-prefixes"

    # Linker warnings
    linker_flag: "-Wl,--warn-execstack"
    linker_flag: "-Wl,--detect-odr-violations"

    # Default compilation mode
    compilation_mode_flags {
        mode: FASTBUILD
        compiler_flag: "-g"
        compiler_flag: "-Og"
    }

    compilation_mode_flags {
        mode: DBG
        compiler_flag: "-g"
        compiler_flag: "-O0"
    }

    compilation_mode_flags {
        mode: OPT
        compiler_flag: "-O2"
        compiler_flag: "-DNDEBUG"
        compiler_flag: "-ffunction-sections"
        compiler_flag: "-fdata-sections"
        compiler_flag: "-flto=thin"
        linker_flag: "-flto=thin"
        linker_flag: "-Wl,--gc-sections"
    }

    # This overrides the default runtime_library_search_directories because the default one uses
    # $EXEC_ORIGIN which isn't supported on ubuntu 14.04 or 16.04
    feature {
        name: 'runtime_library_search_directories',
        flag_set {
            expand_if_all_available: 'runtime_library_search_directories'
            action: 'c++-link-executable'
            action: 'c++-link-dynamic-library'
            action: 'c++-link-nodeps-dynamic-library'
            flag_group {
                iterate_over: 'runtime_library_search_directories'
                flag_group {
                    flag: '-Wl,-rpath,$ORIGIN/%{runtime_library_search_directories}'
                }
            }
        }
    }
}
